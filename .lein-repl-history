(use 'rhizome.viz)
(use 'rhizome.viz :reload-all)
(def g 
    {:a [:b :c]
     :b [:c]
     :c [:a]})
(view-graph (keys g) g (fn [n] {:label n}))
(view-graph (keys g) g :node->descriptor (fn [n] {:label n}))
(def t [[1 [2 3]] [4 [5]]])
(view-tree sequential? seq t :node->descriptor (fn [n] {:label (when (number? n) {:label n})))
(view-tree sequential? seq t :node->descriptor (fn [n] (when (number? n) {:label n})))
(.printStackTrace *e)
(use 'rhizome.viz :reload-all)
(view-tree sequential? seq t :node->descriptor (fn [n] (when (number? n) {:label n})))
(use 'rhizome.viz :reload-all)
 (def t '([1 2] ([3 4] ([5 6 7])))
)
(view-tree list? seq t
    :node->descriptor (fn [n] {:label (when (vector? n) n)}))
(use 'rhizome.dot)
(tree->dot list? seq t :node->descriptor (fn [n] {:label (when (vector? n) n)}))
(println *1
)
(use 'rhizome.dot)
(println (tree->dot list? seq t :node->descriptor (fn [n] {:label (when (vector? n) n)})))
(use 'rhizome.dot :reload-all)
(println (tree->dot list? seq t :node->descriptor (fn [n] {:label (when (vector? n) n)})))
(use 'rhizome.dot :reload-all)
(println (tree->dot list? seq t :node->descriptor (fn [n] {:label (when (vector? n) n)})))
(use 'rhizome.dot :reload-all)
(println (tree->dot list? seq t :node->descriptor (fn [n] {:label (when (vector? n) n)})))
(use 'rhizome.dot :reload-all)
(println (tree->dot list? seq t :node->descriptor (fn [n] {:label (when (vector? n) n)})))
(use 'rhizome.dot :reload-all)
(println (tree->dot list? seq t :node->descriptor (fn [n] {:label (when (vector? n) n)})))
(use 'rhizome.dot :reload-all)
(view-tree list? seq t :node->descriptor (fn [n] {:label (when (vector? n) n)}))
